{"version":3,"file":"component---src-pages-index-tsx-851f5b0b2b1a032fd0af.js","mappings":"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","sources":["webpack://shijbey.github.io/./src/components/Seo.tsx","webpack://shijbey.github.io/./src/hooks/use-site-metadata.tsx","webpack://shijbey.github.io/./src/components/ActiveProjects.tsx","webpack://shijbey.github.io/./src/components/InactiveProjects.tsx","webpack://shijbey.github.io/./src/components/StaleProjects.tsx","webpack://shijbey.github.io/./src/pages/index.tsx","webpack://shijbey.github.io/./node_modules/react-bootstrap/esm/Container.js"],"sourcesContent":["/**\r\n * SEO component that queries for data with\r\n *  Gatsby's useStaticQuery React hook\r\n *\r\n * See: https://www.gatsbyjs.com/docs/how-to/adding-common-features/adding-seo-component/\r\n */\r\n\r\nimport React from \"react\"\r\nimport { useSiteMetadata } from \"../hooks/use-site-metadata\"\r\n\r\nexport interface SeoProps extends React.PropsWithChildren {\r\n  description?: string\r\n  lang?: string\r\n  meta?: { name: string; content: string }[]\r\n  title?: string\r\n  pathname?: string\r\n}\r\n\r\nconst Seo: React.FC<SeoProps> = ({\r\n  title,\r\n  description,\r\n  pathname,\r\n  children,\r\n}) => {\r\n  const {\r\n    title: defaultTitle,\r\n    description: defaultDescription,\r\n    image,\r\n    siteUrl,\r\n    twitterHandle,\r\n    instagramHandle,\r\n  } = useSiteMetadata()\r\n\r\n  const seo = {\r\n    title: title || defaultTitle,\r\n    description: description || defaultDescription,\r\n    image: `${siteUrl}${image}`,\r\n    url: `${siteUrl}${pathname || ``}`,\r\n    twitterHandle,\r\n    instagramHandle,\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <title>{seo.title}</title>\r\n      <meta name=\"description\" content={seo.description} />\r\n      <meta name=\"image\" content={seo.image} />\r\n      <meta name=\"og:title\" content={seo.title} />\r\n      <meta name=\"og:description\" content={seo.description} />\r\n      <meta name=\"og:type\" content=\"website\" />\r\n      <meta name=\"twitter:card\" content=\"summary\" />\r\n      <meta name=\"twitter:creator\" content={seo.twitterHandle} />\r\n      <meta name=\"twitter:title\" content={seo.title} />\r\n      <meta name=\"twitter:description\" content={seo.description} />\r\n      <meta name=\"twitter:image\" content={seo.image} />\r\n      {children}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Seo\r\n","import { graphql, useStaticQuery } from \"gatsby\"\r\n\r\nexport interface SiteMetadata {\r\n  title: string\r\n  description: string\r\n  twitterHandle: string\r\n  instagramHandle: string\r\n  siteUrl: string\r\n  image: string\r\n}\r\n\r\ninterface QueryOutput {\r\n  site: {\r\n    siteMetadata: SiteMetadata\r\n  }\r\n}\r\n\r\nexport const useSiteMetadata = () => {\r\n  const data = useStaticQuery<QueryOutput>(graphql`\r\n    query SiteDataQuery {\r\n      site {\r\n        siteMetadata {\r\n          description\r\n          image\r\n          siteUrl\r\n          instagramHandle\r\n          title\r\n          twitterHandle\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  return data.site.siteMetadata\r\n}\r\n","import React from \"react\"\r\nimport { graphql, useStaticQuery } from \"gatsby\"\r\n\r\ninterface QueryResponse {\r\n  allMarkdownRemark: {\r\n    nodes: {\r\n      frontmatter: {\r\n        title: string\r\n        description?: string\r\n        date?: string\r\n        category?: string\r\n        featuredImage?: {\r\n          childImageSharp?: {\r\n            fluid: {\r\n              src: string\r\n            }\r\n          }\r\n          publicURL: string\r\n        }\r\n      }\r\n      fields: {\r\n        slug: string\r\n      }\r\n    }[]\r\n  }\r\n}\r\n\r\nconst ActiveProjects: React.FC = () => {\r\n  const query: QueryResponse = useStaticQuery(graphql`\r\n    query {\r\n      allMarkdownRemark(\r\n        filter: { frontmatter: { projectStatus: { eq: \"active\" } } }\r\n        sort: { frontmatter: { date: DESC } }\r\n      ) {\r\n        nodes {\r\n          frontmatter {\r\n            title\r\n            description\r\n            date\r\n            category\r\n            featuredImage {\r\n              publicURL\r\n            }\r\n            projectStatus\r\n          }\r\n          fields {\r\n            slug\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  return (\r\n    <div className={`project-grid`}>\r\n      {query.allMarkdownRemark.nodes.map((project, index) => {\r\n        const { title, description } = project.frontmatter\r\n        const { slug } = project.fields\r\n        const imgUrl = project.frontmatter?.featuredImage?.publicURL\r\n\r\n        return (\r\n          <div key={`project_${index}`} className={`project-card shadow`}>\r\n            {imgUrl && (\r\n              <img\r\n                src={imgUrl}\r\n                alt=\"card background\"\r\n                className={`card-background`}\r\n                placeholder=\"blurred\"\r\n              />\r\n            )}\r\n\r\n            <a href={`${slug}`}>\r\n              <div className={`card-tint`}></div>\r\n            </a>\r\n\r\n            <div className={`card-text`}>\r\n              <div className={`title`}>{title}</div>\r\n              <p>{description}</p>\r\n            </div>\r\n          </div>\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ActiveProjects\r\n","import React from \"react\"\r\nimport { graphql, useStaticQuery } from \"gatsby\"\r\n\r\ninterface QueryResponse {\r\n  allMarkdownRemark: {\r\n    nodes: {\r\n      frontmatter: {\r\n        title: string\r\n        description?: string\r\n        date?: string\r\n        category?: string\r\n        featuredImage?: {\r\n          childImageSharp?: {\r\n            fluid: {\r\n              src: string\r\n            }\r\n          }\r\n          publicURL: string\r\n        }\r\n      }\r\n      fields: {\r\n        slug: string\r\n      }\r\n    }[]\r\n  }\r\n}\r\n\r\nconst InactiveProjects: React.FC = () => {\r\n  const query: QueryResponse = useStaticQuery(graphql`\r\n    query {\r\n      allMarkdownRemark(\r\n        filter: { frontmatter: { projectStatus: { eq: \"inactive\" } } }\r\n        sort: { frontmatter: { date: DESC } }\r\n      ) {\r\n        nodes {\r\n          frontmatter {\r\n            title\r\n            description\r\n            date\r\n            category\r\n            featuredImage {\r\n              publicURL\r\n            }\r\n            projectStatus\r\n          }\r\n          fields {\r\n            slug\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  return (\r\n    <div className={`project-grid`}>\r\n      {query.allMarkdownRemark.nodes.map((project, index) => {\r\n        const { title, description } = project.frontmatter\r\n        const { slug } = project.fields\r\n        const imgUrl = project.frontmatter?.featuredImage?.publicURL\r\n\r\n        return (\r\n          <div key={`project_${index}`} className={`project-card shadow`}>\r\n            {imgUrl && (\r\n              <img\r\n                src={imgUrl}\r\n                alt=\"card background\"\r\n                className={`card-background`}\r\n                placeholder=\"blurred\"\r\n              />\r\n            )}\r\n\r\n            <a href={`${slug}`}>\r\n              <div className={`card-tint`}></div>\r\n            </a>\r\n\r\n            <div className={`card-text`}>\r\n              <div className={`title`}>{title}</div>\r\n              <p>{description}</p>\r\n            </div>\r\n          </div>\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default InactiveProjects\r\n","import React from \"react\"\r\nimport { graphql, useStaticQuery } from \"gatsby\"\r\n\r\ninterface QueryResponse {\r\n  allMarkdownRemark: {\r\n    nodes: {\r\n      frontmatter: {\r\n        title: string\r\n        description?: string\r\n        date?: string\r\n        category?: string\r\n        featuredImage?: {\r\n          childImageSharp?: {\r\n            fluid: {\r\n              src: string\r\n            }\r\n          }\r\n          publicURL: string\r\n        }\r\n      }\r\n      fields: {\r\n        slug: string\r\n      }\r\n    }[]\r\n  }\r\n}\r\n\r\nconst StaleProjects: React.FC = () => {\r\n  const query: QueryResponse = useStaticQuery(graphql`\r\n    query {\r\n      allMarkdownRemark(\r\n        filter: { frontmatter: { projectStatus: { eq: \"stale\" } } }\r\n        sort: { frontmatter: { date: DESC } }\r\n      ) {\r\n        nodes {\r\n          frontmatter {\r\n            title\r\n            description\r\n            date\r\n            category\r\n            featuredImage {\r\n              publicURL\r\n            }\r\n            projectStatus\r\n          }\r\n          fields {\r\n            slug\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  return (\r\n    <div className={`project-grid`}>\r\n      {query.allMarkdownRemark.nodes.map((project, index) => {\r\n        const { title, description } = project.frontmatter\r\n        const { slug } = project.fields\r\n        const imgUrl = project.frontmatter?.featuredImage?.publicURL\r\n\r\n        return (\r\n          <div key={`project_${index}`} className={`project-card shadow`}>\r\n            {imgUrl && (\r\n              <img\r\n                src={imgUrl}\r\n                alt=\"card background\"\r\n                className={`card-background`}\r\n                placeholder=\"blurred\"\r\n              />\r\n            )}\r\n\r\n            <a href={`${slug}`}>\r\n              <div className={`card-tint`}></div>\r\n            </a>\r\n\r\n            <div className={`card-text`}>\r\n              <div className={`title`}>{title}</div>\r\n              <p>{description}</p>\r\n            </div>\r\n          </div>\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default StaleProjects\r\n","import { StaticImage } from \"gatsby-plugin-image\"\r\nimport * as React from \"react\"\r\nimport { Container } from \"react-bootstrap\"\r\nimport Layout from \"../components/Layout\"\r\nimport Seo from \"../components/Seo\"\r\nimport ActiveProjects from \"../components/ActiveProjects\"\r\nimport InactiveProjects from \"../components/InactiveProjects\"\r\nimport StaleProjects from \"../components/StaleProjects\"\r\n\r\nconst HomePage: React.FC = () => (\r\n  <Layout>\r\n    <Container className={`pt-5`}>\r\n      <section id=\"about\" className=\"mb-3\">\r\n        <h1 className=\"text-center my-3\">Shi Johnson-Bey (he/him)</h1>\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"d-flex d-block-md col-md-4 justify-content-center p-4\">\r\n              <div\r\n                style={{\r\n                  overflow: \"hidden\",\r\n                  maxWidth: \"300px\",\r\n                }}\r\n              >\r\n                <StaticImage\r\n                  src=\"../images/headshot.jpg\"\r\n                  alt=\"headshot photo\"\r\n                  objectFit=\"cover\"\r\n                  style={{ objectFit: \"cover\" }}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"col-md-8 p-3\">\r\n              <p>\r\n                My name is Shi Johnson-Bey (pronounced like \"shy\"). I research\r\n                multi-agent simulations for emergent storytelling as a Ph.D.\r\n                student in the{\" \"}\r\n                <a href=\"https://eis.ucsc.edu\" target=\"_blank\" rel=\"noreferrer\">\r\n                  Expressive Intelligence Studio\r\n                </a>{\" \"}\r\n                at the University of California - Santa Cruz. I have a M.S. in\r\n                Biomedical Engineering from Carnegie Mellon University and two\r\n                B.S. degrees in Computer Science and Neuroscience from the\r\n                University of Delaware. I am the co-founder of,{\" \"}\r\n                <a\r\n                  href=\"https://theblacklistdmv.com\"\r\n                  target=\"_blank\"\r\n                  rel=\"noreferrer\"\r\n                >\r\n                  The Blacklist DMV\r\n                </a>\r\n                , a social media following focused on spotlighting Black-owned\r\n                food businesses in Washington D.C, Maryland, and Virginia.\r\n                Currently, I am currently the sole web developer and designer\r\n                for our online food business directory,{\" \"}\r\n                <a href=\"https://jyackl.com\" target=\"_blank\" rel=\"noreferrer\">\r\n                  Jyackl.com.\r\n                </a>\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      <section className=\"mb-3\">\r\n        <h1>Active Projects</h1>\r\n        <ActiveProjects />\r\n      </section>\r\n\r\n      <section className=\"mb-3\">\r\n        <h1>Not-so-active Projects</h1>\r\n        <StaleProjects />\r\n      </section>\r\n\r\n      <section className=\"mb-5\">\r\n        <h1>Past Projects</h1>\r\n        <InactiveProjects />\r\n      </section>\r\n    </Container>\r\n  </Layout>\r\n)\r\n\r\nexport default HomePage\r\n\r\nexport const Head = () => <Seo />\r\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  fluid: false\n};\nconst Container = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  fluid,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  className,\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'container');\n  const suffix = typeof fluid === 'string' ? `-${fluid}` : '-fluid';\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, fluid ? `${prefix}${suffix}` : prefix)\n  });\n});\nContainer.displayName = 'Container';\nContainer.defaultProps = defaultProps;\nexport default Container;"],"names":["_ref","title","description","pathname","children","defaultTitle","defaultDescription","image","siteUrl","twitterHandle","instagramHandle","useStaticQuery","site","siteMetadata","seo","url","React","name","content","query","className","allMarkdownRemark","nodes","map","project","index","frontmatter","slug","fields","imgUrl","_project$frontmatter","featuredImage","_project$frontmatter$","publicURL","key","src","alt","placeholder","href","Layout","Container","id","style","overflow","maxWidth","StaticImage","objectFit","target","rel","ActiveProjects","StaleProjects","InactiveProjects","Head","Seo","bsPrefix","fluid","as","Component","props","ref","prefix","suffix","displayName","defaultProps"],"sourceRoot":""}