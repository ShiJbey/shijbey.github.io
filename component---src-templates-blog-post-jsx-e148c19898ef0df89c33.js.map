{"version":3,"file":"component---src-templates-blog-post-jsx-e148c19898ef0df89c33.js","mappings":"mLA4DA,MA1CgCA,IAKzB,IAL0B,MAC/BC,EAAK,YACLC,EAAW,SACXC,EAAQ,SACRC,GACD,EACC,MACEH,MAAOI,EACPH,YAAaI,EAAkB,MAC/BC,EAAK,QACLC,EAAO,cACPC,EAAa,gBACbC,ICZWC,EAAAA,EAAAA,IAAc,cAefC,KAAKC,aDAXC,EAAM,CACVb,MAAOA,GAASI,EAChBH,YAAaA,GAAeI,EAC5BC,MAAM,GAAIC,EAAUD,EACpBQ,IAAI,GAAIP,GAAUL,GAAQ,IAC1BM,gBACAC,mBAGF,OACEM,EAAAA,cAAAA,EAAAA,SAAAA,KACEA,EAAAA,cAAAA,QAAAA,KAAQF,EAAIb,OACZe,EAAAA,cAAAA,OAAAA,CAAMC,KAAK,cAAcC,QAASJ,EAAIZ,cACtCc,EAAAA,cAAAA,OAAAA,CAAMC,KAAK,QAAQC,QAASJ,EAAIP,QAChCS,EAAAA,cAAAA,OAAAA,CAAMC,KAAK,WAAWC,QAASJ,EAAIb,QACnCe,EAAAA,cAAAA,OAAAA,CAAMC,KAAK,iBAAiBC,QAASJ,EAAIZ,cACzCc,EAAAA,cAAAA,OAAAA,CAAMC,KAAK,UAAUC,QAAQ,YAC7BF,EAAAA,cAAAA,OAAAA,CAAMC,KAAK,eAAeC,QAAQ,YAClCF,EAAAA,cAAAA,OAAAA,CAAMC,KAAK,kBAAkBC,QAASJ,EAAIL,gBAC1CO,EAAAA,cAAAA,OAAAA,CAAMC,KAAK,gBAAgBC,QAASJ,EAAIb,QACxCe,EAAAA,cAAAA,OAAAA,CAAMC,KAAK,sBAAsBC,QAASJ,EAAIZ,cAC9Cc,EAAAA,cAAAA,OAAAA,CAAMC,KAAK,gBAAgBC,QAASJ,EAAIP,QACvCH,EACA,C,yEEUP,UA5DyB,IAAyB,IAAD,MAAvB,KAAEe,EAAI,SAAEC,GAAU,EAC1C,MAAMC,EAAOF,EAAKG,eACZC,GAAkC,QAAtB,EAAAJ,EAAKP,KAAKC,oBAAY,aAAtB,EAAwBZ,QAAK,QAE/C,OACE,gBAAC,IAAM,CAACmB,SAAUA,EAAUnB,MAAOsB,GACjC,gBAAC,IAAG,CACFtB,MAAOoB,EAAKG,YAAYvB,MACxBC,YAAamB,EAAKG,YAAYtB,aAAemB,EAAKI,UAEpD,gBAAC,IAAS,CAACC,UAAU,QACnB,2BACEA,UAAU,YACVC,WAAS,EACTC,SAAS,6BAET,8BACE,sBAAIC,SAAS,YAAYR,EAAKG,YAAYvB,OAC1C,yBAAIoB,EAAKG,YAAYM,OAEvB,2BACEC,wBAAyB,CAAEC,OAAQX,EAAKY,MACxCJ,SAAS,gBAEX,6BAgCG,C,2EC1Db,MAGMK,EAAyB,cAAiB,EAC9CC,WACAC,QAEAC,GAAIC,EAAY,MAChBZ,eACGa,GACFC,KACD,MAAMC,GAAS,QAAmBN,EAAU,aACtCO,EAA0B,iBAAVN,EAAqB,IAAIA,IAAU,SACzD,OAAoB,SAAKE,EAAW,CAClCE,IAAKA,KACFD,EACHb,UAAW,IAAWA,EAAWU,EAAQ,GAAGK,IAASC,IAAWD,IAChE,IAEJP,EAAUS,YAAc,YACxBT,EAAUU,aApBW,CACnBR,OAAO,GAoBT,K","sources":["webpack://shijbey.github.io/./src/components/Seo.tsx","webpack://shijbey.github.io/./src/hooks/use-site-metadata.tsx","webpack://shijbey.github.io/./src/templates/blog-post.jsx","webpack://shijbey.github.io/./node_modules/react-bootstrap/esm/Container.js"],"sourcesContent":["/**\r\n * SEO component that queries for data with\r\n *  Gatsby's useStaticQuery React hook\r\n *\r\n * See: https://www.gatsbyjs.com/docs/how-to/adding-common-features/adding-seo-component/\r\n */\r\n\r\nimport React from \"react\"\r\nimport { useSiteMetadata } from \"../hooks/use-site-metadata\"\r\n\r\nexport interface SeoProps extends React.PropsWithChildren {\r\n  description?: string\r\n  lang?: string\r\n  meta?: { name: string; content: string }[]\r\n  title?: string\r\n  pathname?: string\r\n}\r\n\r\nconst Seo: React.FC<SeoProps> = ({\r\n  title,\r\n  description,\r\n  pathname,\r\n  children,\r\n}) => {\r\n  const {\r\n    title: defaultTitle,\r\n    description: defaultDescription,\r\n    image,\r\n    siteUrl,\r\n    twitterHandle,\r\n    instagramHandle,\r\n  } = useSiteMetadata()\r\n\r\n  const seo = {\r\n    title: title || defaultTitle,\r\n    description: description || defaultDescription,\r\n    image: `${siteUrl}${image}`,\r\n    url: `${siteUrl}${pathname || ``}`,\r\n    twitterHandle,\r\n    instagramHandle,\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <title>{seo.title}</title>\r\n      <meta name=\"description\" content={seo.description} />\r\n      <meta name=\"image\" content={seo.image} />\r\n      <meta name=\"og:title\" content={seo.title} />\r\n      <meta name=\"og:description\" content={seo.description} />\r\n      <meta name=\"og:type\" content=\"website\" />\r\n      <meta name=\"twitter:card\" content=\"summary\" />\r\n      <meta name=\"twitter:creator\" content={seo.twitterHandle} />\r\n      <meta name=\"twitter:title\" content={seo.title} />\r\n      <meta name=\"twitter:description\" content={seo.description} />\r\n      <meta name=\"twitter:image\" content={seo.image} />\r\n      {children}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Seo\r\n","import { graphql, useStaticQuery } from \"gatsby\"\r\n\r\nexport interface SiteMetadata {\r\n  title: string\r\n  description: string\r\n  twitterHandle: string\r\n  instagramHandle: string\r\n  siteUrl: string\r\n  image: string\r\n}\r\n\r\ninterface QueryOutput {\r\n  site: {\r\n    siteMetadata: SiteMetadata\r\n  }\r\n}\r\n\r\nexport const useSiteMetadata = () => {\r\n  const data = useStaticQuery<QueryOutput>(graphql`\r\n    query SiteDataQuery {\r\n      site {\r\n        siteMetadata {\r\n          description\r\n          image\r\n          siteUrl\r\n          instagramHandle\r\n          title\r\n          twitterHandle\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  return data.site.siteMetadata\r\n}\r\n","import * as React from \"react\"\r\nimport { graphql } from \"gatsby\"\r\nimport { Container } from \"react-bootstrap\"\r\nimport Layout from \"../components/Layout\"\r\nimport Seo from \"../components/Seo\"\r\n\r\nconst BlogPostTemplate = ({ data, location }) => {\r\n  const post = data.markdownRemark\r\n  const siteTitle = data.site.siteMetadata?.title || `Title`\r\n\r\n  return (\r\n    <Layout location={location} title={siteTitle}>\r\n      <Seo\r\n        title={post.frontmatter.title}\r\n        description={post.frontmatter.description || post.excerpt}\r\n      />\r\n      <Container className=\"py-5\">\r\n        <article\r\n          className=\"blog-post\"\r\n          itemScope\r\n          itemType=\"http://schema.org/Article\"\r\n        >\r\n          <header>\r\n            <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\r\n            <p>{post.frontmatter.date}</p>\r\n          </header>\r\n          <section\r\n            dangerouslySetInnerHTML={{ __html: post.html }}\r\n            itemProp=\"articleBody\"\r\n          />\r\n          <hr />\r\n          {/* <footer>\r\n          <Bio />\r\n        </footer> */}\r\n        </article>\r\n        {/* <nav className=\"blog-post-nav\">\r\n        <ul\r\n          style={{\r\n            display: `flex`,\r\n            flexWrap: `wrap`,\r\n            justifyContent: `space-between`,\r\n            listStyle: `none`,\r\n            padding: 0,\r\n          }}\r\n        >\r\n          <li>\r\n            {previous && (\r\n              <Link to={previous.fields.slug} rel=\"prev\">\r\n                ← {previous.frontmatter.title}\r\n              </Link>\r\n            )}\r\n          </li>\r\n          <li>\r\n            {next && (\r\n              <Link to={next.fields.slug} rel=\"next\">\r\n                {next.frontmatter.title} →\r\n              </Link>\r\n            )}\r\n          </li>\r\n        </ul>\r\n      </nav> */}\r\n      </Container>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default BlogPostTemplate\r\n\r\nexport const pageQuery = graphql`\r\n  query BlogPostBySlug(\r\n    $id: String!\r\n    $previousPostId: String\r\n    $nextPostId: String\r\n  ) {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n      }\r\n    }\r\n    markdownRemark(id: { eq: $id }) {\r\n      id\r\n      excerpt(pruneLength: 160)\r\n      html\r\n      frontmatter {\r\n        title\r\n        date(formatString: \"MMMM DD, YYYY\")\r\n        description\r\n      }\r\n    }\r\n    previous: markdownRemark(id: { eq: $previousPostId }) {\r\n      fields {\r\n        slug\r\n      }\r\n      frontmatter {\r\n        title\r\n      }\r\n    }\r\n    next: markdownRemark(id: { eq: $nextPostId }) {\r\n      fields {\r\n        slug\r\n      }\r\n      frontmatter {\r\n        title\r\n      }\r\n    }\r\n  }\r\n`\r\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  fluid: false\n};\nconst Container = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  fluid,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  className,\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'container');\n  const suffix = typeof fluid === 'string' ? `-${fluid}` : '-fluid';\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, fluid ? `${prefix}${suffix}` : prefix)\n  });\n});\nContainer.displayName = 'Container';\nContainer.defaultProps = defaultProps;\nexport default Container;"],"names":["_ref","title","description","pathname","children","defaultTitle","defaultDescription","image","siteUrl","twitterHandle","instagramHandle","useStaticQuery","site","siteMetadata","seo","url","React","name","content","data","location","post","markdownRemark","siteTitle","frontmatter","excerpt","className","itemScope","itemType","itemProp","date","dangerouslySetInnerHTML","__html","html","Container","bsPrefix","fluid","as","Component","props","ref","prefix","suffix","displayName","defaultProps"],"sourceRoot":""}