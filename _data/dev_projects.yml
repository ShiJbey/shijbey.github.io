- name: 'Drolta: A Logic Programming-Inspired Query Language for SQLite in Python'
  is_active: true
  summary: >
      Drolta is a story-sifting language I created for working with SQLite data
      in Python. It mimics logic programming to make queries easier to write
      than using raw SQL. The social simulation data I work with (usually
      generated by Minerva) contains information about characters, their traits,
      their relationships, and their life events. Looking for narrative patterns
      across all these tables resulted in long SQL queries that were hard to
      understand. Drolta handles all the SQL complexities, allowing users to write
      more concise queries, and even create reusable query rules. Additionally,
      Drolta is data agnostic. So, it works with any data stored within a
      SQLite database.
  img_src: '/static/images/projects/drolta_b.png'
  img_alt: 'Drolta from Castlevania: Nocturne'
  github: 'https://github.com/ShiJbey/drolta_py'

- name: 'Minerva: An Agent-Based Dynasty Simulation'
  is_active: true
  summary: >
      Minerva is a non-interactive dynasty simulator that models procedurally generated
      characters and families vying for influence and power over a shared map. It is
      designed for emergent narrative research and data analysis. I've found it to be
      an excellent project for learning how to write SQL queries. Minerva's core
      architecture is based on Neighborly, and its systems and mechanics were inspired
      by Game of Thrones, the Shōgun board game, WorldBox, Crusader Kings III, and
      the Japanese Clan system.

      I started this project as a fork of Neighborly because I felt that Neighborly
      tried to do too many things. Neighborly provides an expandable platform, but
      creating emergent stories requires a lot of authoring work. Additionally,
      Neighborly's stories felt like mundane slice-of-life stories about people
      raising families, working jobs, and moving in and out of romantic
      relationships. Minerva addresses this dullness by providing a more interesting
      narrative framing about families fighting for power.
  img_src: '/static/images/projects/minerva.png'
  img_alt: 'A screen shot of the minerva pygame visualization.'
  github: 'https://github.com/ShiJbey/minerva'

- name: 'Anansi: Social Simulation-Driven Visual Novels in Unity'
  is_active: true
  summary: >
      Anansi is a framework for creating social simulation-driven visual novel experiences in
      Unity. It combines the Ink narrative scripting language, a storylet architecture, and a
      social simulation that manages non-player character (NPC) schedules, emotions, personality
      traits, and relationships. Interactions with NPCs affect their feelings toward the player
      and other NPCs. Additionally, NPCs can reason about their relationship with the player and
      respond to events that happen to other characters in their social circle.
  img_src: 'https://github.com/ShiJbey/Calypso/assets/11076525/46455e67-94b6-49e5-a072-980bd9ca6754'
  img_alt: 'screenshot of Anansi sample game.'
  github: 'https://github.com/ShiJbey/Anansi'

- name: 'TDRS: A Trait-Driven Relationship System for Unity'
  is_active: true
  summary: >
      TDRS (Trait-Driven Relationship System) is a toolkit for modeling dynamic character
      relationships for life sims, dating
      sims, visual novels, and adventure games in Unity. It enables game developers to track
      relationships between social entities (NPCs, players, factions, etc.), apply various traits
      that modify how characters feel
      about each other, and dispatch various social event that change relationships and
      build interpersonal histories. Game designers can leverage this package
      for NPC decision-making, customizing dialogue, and content gating. TDRS is currently used
      as the relationship system for Anansi.
  img_src: '/static/images/projects/TDRS.jpg'
  img_alt: 'TDRS marketing image'
  github: 'https://github.com/ShiJbey/TDRS'

- name: 'Neighborly: An Agent-Based Settlement Simulation'
  is_active: false
  summary: >
      Neighborly is a story-generation-focused agent-based modeling framework. It enables users to
      simulate the lives and histories of characters living within a single settlement. The fun of
      neighborly comes from exploring the generated history and seeing how the behaviors of the
      various agents led to intriguing and humorous emergent stories.

      Neighborly combines game-inspired elements from Roguelike games, such as
      <a href="https://www.bay12games.com/dwarves/">Dwarf Fortress</a>
      and <a href="https://www.cavesofqud.com/">Caves of Qud</a>, with the
      authorability and data science focus od agent-based modeling frameworks
      like <a href="https://mesa.readthedocs.io/en/stable/">Mesa</a>.
  img_src: '/static/images/projects/cityviz_screenshot.png'
  img_alt: 'screenshot of isometric city builder'
  github: 'https://github.com/ShiJbey/neighborly'

- name: 'Centrifuge: A Visual Programming Editor for Story-Sifting Simulated Story Worlds'
  is_active: false
  summary: >
      Node-based story-sifting tool for character-driven world
      simulations. This was my first project as a grad student
      at UCSC. I intended to build a graphical tool that
      helped people search for characters that met certain
      preconditions, such as experiencing a specific series of
      events, knowing a particular character, or any other
      interesting pattern. The other tools for story-sifting
      up to this point were all text-based domain-specific
      languages. Centrifuge is a cross-platform desktop app
      built with electron.
  img_src: '/static/images/projects/editor_screenshot.png'
  img_alt: 'screenshot of custom editor'
  github: 'https://github.com/ShiJbey/centrifuge'

- name: 'Jyackl: An Online Catalog of Black-Owned Food Businesses in the DMV Area'
  is_active: false
  summary: >
      Jyackl (pronounced like Jackal) was an online directory of
      Black-owned businesses in Washington DC, Maryland, and
      Virginia. This was the other side of my social media work
      as a part of <em>The Blacklist DMV</em>. We wanted to make a living
      artifact that cataloged all the Black-owned businesses
      as services in the DMV area. I did all the design and
      coding for the web app. You can still try it out.
  img_src: '/static/images/projects/jyackl.jpg'
  img_alt: 'Screenshot of Jyackl.com'
  links:
      - text: Jyackl.com
        url: 'https://jyackl.com'

- name: 'Infiniforge: Procedurally Generated 3D Swords'
  is_active: false
  summary: >
      I started designing this project in 2016. At the time, I was
      heavily interested in both blacksmithing and procedural
      generation. I didn't know anything about
      computer graphics or PCG when I started. So, this project served as my
      introduction to both of those. Over the past three years,
      this project has helped me to grow more as a programmer. I continue
      to add to Infiniforge, even though it was to be submitted for the
      <a href="https://www.reddit.com/r/proceduralgeneration/comments/4wubjy/monthly_challenge_9_august_2016_procedural_weapons/"
          rel="none">August 2016 /procedural_generation subreddit challenge</a>.
      Infiniforge is a NodeJS module that generates and exports 3D meshes
      (using ThreeJs) as glTF JSON. You can import the models into Unity or other software that
      supports the
      format.
  img_src: '/static/images/projects/sword.gif'
  img_alt: 'spinning sword 3D model generated with Infiniforge.'
  github: 'https://github.com/ShiJbey/Infiniforge'
  links:
      - text: Play the demo!
        url: '/infiniforge.html'

- name: 'Magpie'
  is_active: false
  summary: >
      This was the final project for my Fall 2018 15-466: Computer Game Programming course.
      I worked on a team with three other students where my primary role was to write the
      code which imported our 3D assets, built the level, and instanced characters/animations.
      In the game, you play a Magpie bird stealing items from a museum. How many things
      can you steal before you're caught by security?
  img_src: '/static/images/projects/magpie.jpg'
  img_alt: 'Magpie promotional art'
  github: 'https://github.com/ShiJbey/Magpie'

- name: 'Boxing Reinforcement Learning Agents in Unity'
  is_active: false
  summary: >
      I threw this project together over the course of a week as an entry
      in Unity's first challenge for their new 'Ml-Agents' machine learning
      workflow. I had tossed around the idea of using machine learning to
      train AI agents in fighting games, but I had never gotten around to it
      until then. The agents learn via Reinforcement Learning and are given
      a simple policy that positively rewards landed punches on the opponent
      and negatively awards taking damage. Other behaviors, such as successful
      blocking and advancing on the opponent, are also rewarded.
  img_src: '/static/images/projects/ml-boxing.gif'
  img_alt: 'Animation of characters boxing in a ring'
  github: 'https://github.com/ShiJbey/Ml-Agent-Boxing'

- name: 'Auditory Brain-Computer Interfaces for VR in Unity'
  is_active: false
  summary: >
      This project was my master's research project. The goal was to explore the use of an
      auditory
      P300 BCI paradigm for enabling users to select objects in virtual reality.
      I ended with an EEG-hardware agnostic Unity project that could run different P300 paradigms
      in virtual reality. While running the
      unity scene, EEG data is streamed from the headset and written out to files to be
      processed. For example, one can take recorded EEG data using a machine learning
      classifier to predict what object the user wants to select. Pictured is
      the virtual apartment environment with three objects used during testing.
  img_src: '/static/images/projects/vr-screenshot.png'
  img_alt: 'Screenshot of VR experimentation environment'
  github: 'https://github.com/ShiJbey/AudioERP'
  links:
      - text: 'Masters Thesis'
        url: '/static/publications/Event_Related_Potentials_for_Virtual_Reality_Interactions.pdf'
